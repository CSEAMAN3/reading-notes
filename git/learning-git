

# Learning Git

## Reference
https://learngitbranching.js.org/


### Learnings 

#### Commits

A commit in a git repository records a snapshot of all the (tracked) files in your directory. It's like a giant copy and paste,
but even better! Git wants to keep commits as lightweight as possible though, so it doesn't just blindly copy the entire directory 
every time you commit. It can (when possible) compress a commit as a set of changes, or a "delta", from one version of the repository 
to the next. Git also maintains a history of which commits were made when. That's why most commits have ancestor commits above them.
You can think of commits as snapshots of the project. Commits are very lightweight and switching between them is wicked fast!

To make a commit we enter: git commit into the terminal

#### Git Banches

Branches in Git are incredibly lightweight as well. They are simply pointers to a specific commit -- nothing more. 
This is why many Git enthusiasts chant the mantra:

branch early, and branch often

Because there is no storage / memory overhead with making many branches, it's easier to logically divide up your work than have big 
beefy branches. When we start mixing branches and commits, we will see how these two features combine. For now though, just remember 
that a branch essentially says "I want to include the work of this commit and all parent commits."

git branch name-of-branch

Let's tell git we want to checkout the branch with:

git checkout name-of-branch

This will put us on the new branch before committing our changes.
Our changes were recorded on the new branch.

Shortcut: if you want to create a new branch AND check it out at the same time, you can simply type:
git checkout -b name-of-branch

#### Branches and Merging












